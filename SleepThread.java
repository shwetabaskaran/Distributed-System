//Shweta Baskaran
//1001667586

//References
//https://stackoverflow.com/questions/10381783/get-thefirst-item-of-linkedhashmap/10381824
//https://stackoverflow.com/questions/16218863/java-return-if-list-contains-string

import java.net.Socket;
import java.security.KeyStore.Entry;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Set;

public class SleepThread extends Thread
{
	private Server server    = null;
	boolean b = false;
	
	//Constructor that is invoked from the Server class
	public SleepThread(Server _server)
	{  
		super();
	    server = _server;
	}
	public void run()
	{
		//Checks on the queue of threads as long as the server is up and running
		while(server.thread.isAlive())
		{
			//Makes sure if the queue(here, outerMap) is not empty. As long is it has entries, the code executes
			if(!(server.outerMap.isEmpty()))
			{
				//Boolean value b is used to check if a random number belonging to a client needs to be waited for byte server
				//This check is possible by checking if the client is present in the list of clients connected in the arraylist
				b = false;
				//Fetch the first element in the queue(here, linkedHashMap)
				String clnam = server.outerMap.keySet().iterator().next();				//https://stackoverflow.com/questions/10381783/get-thefirst-item-of-linkedhashmap/10381824
				LinkedHashMap<Integer,String> innerMap = server.outerMap.get(clnam);
				//Gets clientID of the client popped from the queue
				Integer clientID = innerMap.keySet().iterator().next();					//https://stackoverflow.com/questions/10381783/get-thefirst-item-of-linkedhashmap/10381824
				//input stores the random number generated by client handled by thread clientID
				String input = innerMap.get(clientID);

				//server checks if client is still connected by cross verifying from clientList
				for(String str : server.clientList)										//https://stackoverflow.com/questions/16218863/java-return-if-list-contains-string
				{
					if(str.trim().equalsIgnoreCase(clnam.toLowerCase()))		//str - to read each client in the client list
					{
						b = true;
		   				break;
					}
				}
				if(b == true)
					//Function is called that makes server wait for the random number of seconds and informs the client that it waited
					server.messageFromClient(clientID,input,clnam);				//if the client popped from queue(LHM) is still connected, server waits for that period of time and responds back to the client
				else
				{
					//If a client is not presently connected, server will not wait for the number of seconds generated by the client
					ServerGUI.updateServer("Server didn't wait for "+clnam+" as it is disconnected");   //if the client popped from queue(LHM) is disconnected, server doesn't wait and simply removes the client from the queue	
					//The appropriate current client is removed from the queue(here, linkedHashMap)
					server.outerMap.remove(clnam);
				}
			}
			else
				continue;
		}
	}
}